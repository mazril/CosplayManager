<mah:MetroWindow x:Class="CosplayManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        xmlns:local="clr-namespace:CosplayManager"
        xmlns:viewmodels="clr-namespace:CosplayManager.ViewModels"
        xmlns:models="clr-namespace:CosplayManager.Models"
        xmlns:converters="clr-namespace:CosplayManager.Converters"
        mc:Ignorable="d"
        Title="Cosplay Manager Deluxe" Height="768" Width="1366"
        GlowBrush="{DynamicResource MahApps.Brushes.Accent}"
        BorderThickness="1" 
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=viewmodels:MainWindowViewModel, IsDesignTimeCreatable=False}">

    <Window.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <converters:CategoryProfileToCharacterNameConverter x:Key="CategoryProfileToCharacterNameConverter"/>
        <converters:StringCollectionToStringConverter x:Key="StringCollectionToStringConverter"/>

        <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
            <Setter Property="ContextMenuService.ShowOnDisabled" Value="True"/>
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                        <ContextMenu.Style>
                            <Style TargetType="ContextMenu">
                                <Setter Property="DataContext" Value="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}"/>
                            </Style>
                        </ContextMenu.Style>

                        <MenuItem Header="Przeskanuj foldery 'Mix' dla tej Modelki" 
                                  Command="{Binding MatchModelSpecificCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=ModelDisplayViewModel}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type viewmodels:ModelDisplayViewModel}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                        <MenuItem Header="Analizuj Modelkę pod kątem podziału profili"
                                  Command="{Binding AnalyzeModelForSplittingCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=ModelDisplayViewModel}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type viewmodels:ModelDisplayViewModel}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                        <MenuItem Header="Usuń całą Modelkę i jej profile"
                                  Command="{Binding RemoveModelTreeCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=ModelDisplayViewModel}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type viewmodels:ModelDisplayViewModel}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>

                        <MenuItem Header="Sprawdź sugestie dla tej Postaci" 
                                  Command="{Binding CheckCharacterSuggestionsCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=CategoryProfile}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type models:CategoryProfile}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                        <MenuItem Header="Zaproponuj podział profilu Postaci"
                                  Command="{Binding OpenSplitProfileDialogCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext.HasSplitSuggestion, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type models:CategoryProfile}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                        <MenuItem Header="Usuń profil Postaci" 
                                  Command="{Binding RemoveProfileCommand}"
                                  CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                                  Visibility="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=CategoryProfile}">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem" BasedOn="{StaticResource MahApps.Styles.MenuItem}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, FallbackValue={x:Null}}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static converters:TypeCheckConverter.Instance}, ConverterParameter={x:Type models:CategoryProfile}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                    </ContextMenu>
                </Setter.Value>
            </Setter>
        </Style>

        <converters:TypeCheckConverter x:Key="TypeCheckConverter" />
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" VerticalAlignment="Top">
            <MenuItem Header="_Plik">
                <MenuItem Header="_Nowy profil..." Command="{Binding CreateNewProfileSetupCommand}"/>
                <MenuItem Header="_Wczytaj profile" Command="{Binding LoadProfilesCommand}"/>
                <MenuItem Header="_Zapisz profile" Command="{Binding SaveProfilesCommand}"/>
                <Separator/>
                <MenuItem Header="Zapisz _Ustawienia Aplikacji" Command="{Binding SaveAppSettingsCommand}"/>
                <Separator/>
                <MenuItem Header="_Wyjście" Click="ExitMenuItem_Click"/>
            </MenuItem>
            <MenuItem Header="_Narzędzia">
                <MenuItem Header="Automatycznie utwórz profile z _folderów" Command="{Binding AutoCreateProfilesCommand}"/>
                <MenuItem Header="Sugeruj obrazy globalnie (wszystkie 'Mix')" Command="{Binding SuggestImagesCommand}"/>
                <MenuItem Header="Wybierz główny folder _biblioteki..." Command="{Binding SelectLibraryPathCommand}"/>
                <MenuItem x:Name="TestClipMenuItem" Header="Testuj połączenie z _CLIP API..." Click="TestClipButton_Click" IsEnabled="False"/>
            </MenuItem>
            <MenuItem Header="_Opcje Zaawansowane">
                <MenuItem Header="Pokaż/Ukryj Ustawienia Zaawansowane" IsCheckable="True" IsChecked="{Binding AreAdvancedSettingsExpanded, Mode=TwoWay}"/>
            </MenuItem>
        </Menu>

        <Grid Grid.Row="1" Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="350" MinWidth="250" MaxWidth="600"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Expander Grid.Row="0" Header="Ustawienia Zaawansowane" Margin="0,0,0,5"
                          IsExpanded="{Binding AreAdvancedSettingsExpanded, Mode=TwoWay}"
                          Visibility="{Binding AreAdvancedSettingsExpanded, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel Margin="5">
                        <TextBlock Text="Główny folder biblioteki:" Margin="0,0,0,2"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Grid.Column="0" Text="{Binding LibraryRootPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsReadOnly="True"/>
                            <Button Grid.Column="1" Command="{Binding SelectLibraryPathCommand}" Content="..." Margin="5,0,0,0" Padding="5,2"/>
                        </Grid>

                        <TextBlock Text="Nazwy folderów źródłowych (Mix, oddzielone przecinkiem):" Margin="0,5,0,2"/>
                        <TextBox Text="{Binding SourceFolderNamesInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                        <TextBlock Text="Próg podobieństwa dla sugestii (0.0 - 1.0):" Margin="0,5,0,2"/>
                        <Slider Value="{Binding SuggestionSimilarityThreshold, Mode=TwoWay}" Minimum="0.1" Maximum="1.0" SmallChange="0.01" LargeChange="0.05" TickFrequency="0.05" IsSnapToTickEnabled="False"/>
                        <TextBlock Text="{Binding SuggestionSimilarityThreshold, StringFormat='N2'}" HorizontalAlignment="Right" Margin="0,-15,5,0"/>

                        <Button Content="Zapisz Ustawienia" Command="{Binding SaveAppSettingsCommand}" Margin="0,10,0,0" Padding="10,5"/>
                    </StackPanel>
                </Expander>

                <TreeView Grid.Row="1" x:Name="ProfilesTreeView" 
                          ItemsSource="{Binding HierarchicalProfilesList}"
                          SelectedItemChanged="ProfilesTreeView_SelectedItemChanged"
                          VirtualizingPanel.IsVirtualizing="True"
                          VirtualizingPanel.VirtualizationMode="Recycling"
                          ScrollViewer.CanContentScroll="True">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemStyle}">
                        </Style>
                    </TreeView.ItemContainerStyle>
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding CharacterProfiles}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Kind="AccountGroupOutline" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                <TextBlock Text="{Binding ModelName}" FontWeight="Bold"/>
                                <TextBlock Text=" (" Foreground="Gray" Margin="2,0,0,0"/>
                                <TextBlock Text="{Binding CharacterProfiles.Count}" Foreground="Gray"/>
                                <TextBlock Text=" profili" Foreground="Gray"/>
                                <TextBlock Text=")" Foreground="Gray"/>
                                <TextBlock Text=" - Sugestie: " Foreground="DarkGoldenrod" Margin="5,0,0,0"
                                           Visibility="{Binding HasPendingSuggestions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Text="{Binding PendingSuggestionsCount}" Foreground="DarkGoldenrod" FontWeight="Bold"
                                           Visibility="{Binding HasPendingSuggestions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            </StackPanel>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>

                    <TreeView.Resources>
                        <HierarchicalDataTemplate DataType="{x:Type models:CategoryProfile}" ItemsSource="{Binding SubItems}">
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Kind="AccountOutline" VerticalAlignment="Center" Margin="0,0,5,0"
                                                            Foreground="{Binding HasSplitSuggestion, Converter={StaticResource SplitSuggestionToColorConverter}, FallbackValue='Black'}"/>
                                <TextBlock Text="{Binding Converter={StaticResource CategoryProfileToCharacterNameConverter}}"/>
                                <TextBlock Text=" [" Foreground="DimGray" Margin="2,0,0,0"/>
                                <TextBlock Text="{Binding ImageCountInProfile}" Foreground="DimGray"/>
                                <TextBlock Text=" obr.]" Foreground="DimGray"/>
                                <TextBlock Text=" (Sugestie: " Foreground="ForestGreen" Margin="5,0,0,0"
                                           Visibility="{Binding HasPendingSuggestions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Text="{Binding PendingSuggestionsCount}" Foreground="ForestGreen" FontWeight="Bold"
                                           Visibility="{Binding HasPendingSuggestions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Text=")" Foreground="ForestGreen" 
                                           Visibility="{Binding HasPendingSuggestions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Text=" (P)" Foreground="Purple" Margin="5,0,0,0" FontWeight="Bold"
                                           Visibility="{Binding HasSplitSuggestion, Converter={StaticResource BooleanToVisibilityConverter}}"
                                           ToolTip="Ten profil może kwalifikować się do podziału"/>
                            </StackPanel>
                        </HierarchicalDataTemplate>

                        <converters:SplitSuggestionToColorConverter x:Key="SplitSuggestionToColorConverter"/>
                    </TreeView.Resources>
                </TreeView>
            </Grid>

            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightGray"/>

            <Grid Grid.Column="2" Margin="5,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <GroupBox Grid.Row="0" Header="Edytor Profilu" Margin="0,0,0,5" Padding="5"
                          IsEnabled="{Binding AnyProfilesLoaded, Converter={StaticResource InverseBooleanConverter}, ConverterParameter=EnableIfFalse}">
                    <GroupBox.Style>
                        <Style TargetType="GroupBox" BasedOn="{StaticResource MahApps.Styles.GroupBox}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsProfileSelected}" Value="True">
                                    <Setter Property="Header" Value="{Binding SelectedProfile.CategoryName, StringFormat='Edytuj profil: {0}'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsProfileSelected}" Value="False">
                                    <Setter Property="Header" Value="Utwórz Nowy Profil"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </GroupBox.Style>
                    <StackPanel>
                        <TextBlock Text="Nazwa Modelki:"/>
                        <TextBox Text="{Binding ModelNameInput, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,5"/>
                        <TextBlock Text="Nazwa Postaci/Kategorii:"/>
                        <TextBox Text="{Binding CharacterNameInput, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,5"/>
                        <TextBlock Text="Pełna nazwa profilu (generowana):"/>
                        <TextBox Text="{Binding CurrentProfileNameForEdit, Mode=OneWay}" IsReadOnly="True" Margin="0,0,0,10" FontStyle="Italic"/>

                        <TextBlock Text="Obrazy źródłowe dla profilu:" Margin="0,0,0,2"/>
                        <TextBlock Text="{Binding ImageFiles.Count, StringFormat='Liczba obrazów: {0}'}" Foreground="Gray" FontSize="10" Margin="0,0,0,5"/>
                        <WrapPanel Orientation="Horizontal" Margin="0,5,0,5">
                            <Button Content="Dodaj obrazy..." Command="{Binding AddFilesToProfileCommand}" Margin="0,0,5,0" Padding="10,3"/>
                            <Button Content="Wyczyść listę obrazów" Command="{Binding ClearFilesFromProfileCommand}" Padding="10,3"
                                    IsEnabled="{Binding ImageFiles.Count, Converter={StaticResource CountToBoolConverter}}"/>
                        </WrapPanel>

                        <Button Content="Generuj/Aktualizuj Profil" Command="{Binding GenerateProfileCommand}" Margin="0,10,0,0" Padding="10,5" HorizontalAlignment="Left"
                                IsEnabled="{Binding CanExecuteGenerateProfile}"/>
                    </StackPanel>
                </GroupBox>

                <GroupBox Grid.Row="1" Header="Obrazy w wybranym/edytowanym profilu" Margin="0,5,0,0">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <ListView ItemsSource="{Binding ImageFiles}" SelectionMode="Extended">
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal" ItemWidth="150" ItemHeight="170"/>
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                            <ListView.ItemTemplate>
                                <DataTemplate>
                                    <Border BorderBrush="LightGray" BorderThickness="1" Margin="5" Padding="5">
                                        <StackPanel Width="140">
                                            <Image Source="{Binding FilePath}" Width="120" Height="120" Stretch="Uniform" Margin="0,0,0,5">
                                                <Image.ToolTip>
                                                    <ToolTip>
                                                        <StackPanel>
                                                            <TextBlock Text="{Binding FileName}" FontWeight="Bold"/>
                                                            <TextBlock Text="{Binding FilePath}"/>
                                                            <TextBlock Text="{Binding Width, StringFormat='Szerokość: {0}px'}"/>
                                                            <TextBlock Text="{Binding Height, StringFormat='Wysokość: {0}px'}"/>
                                                        </StackPanel>
                                                    </ToolTip>
                                                </Image.ToolTip>
                                            </Image>
                                            <TextBlock Text="{Binding FileName}" TextTrimming="CharacterEllipsis" HorizontalAlignment="Center" FontSize="10" ToolTip="{Binding FileName}"/>
                                        </StackPanel>
                                    </Border>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                    </ScrollViewer>
                </GroupBox>
            </Grid>
        </Grid>

        <StatusBar Grid.Row="2">
            <StatusBarItem>
                <TextBlock x:Name="StatusTextBlock" Text="{Binding StatusMessage, Mode=OneWay}"/>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <ProgressBar Width="150" Height="15" IsIndeterminate="True" Visibility="Collapsed"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</mah:MetroWindow>